-- ~/.config/nvim/snippets/cpp.lua
local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node
local i = ls.insert_node

return {
  -- Snippet 1: basic CP template
  s("beg", {
    t({
      "#ifdef ONPC",
      "  #define  _GLIBCXX_DEBUG",
      "#endif",
      "#include <bits/stdc++.h>",
      "#define  fastread() (ios_base:: sync_with_stdio(false), cin.tie(NULL));",
      "",
      "using namespace std;",
      "mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());",
      "",
      "typedef long long ll;",
      "typedef long double ld;",
      "",
      "int solve() {",
      "  ",
    }),
    i(2, "// code here"),
    t({
      "",
      "  return 0;",
      "}",
      "",
      "int32_t main() {",
      "    fastread();",
      "    int TET = 1;",
      "    //",
    }),
    i(1, "cin >> TET;"),
    t({
      "",
      "    for (int i = 1; i <= TET; i++) {",
      '      //cout<< "Case #"<<i <<": "; ',
      "        if (solve()) {",
      "            break;",
      "        }",
      "        #ifdef ONPC",
      '            cout << "__________________________" << endl;',
      "        #endif",
      "    }",
      "    #ifdef ONPC",
      '        cerr << endl << "finished in " << clock() * 1.0 / CLOCKS_PER_SEC << " sec" << endl;',
      "    #endif",
      "}",
    }),
  }),

  -- Snippet 2: full CP template
  s("ffj", {
    t({
      "#ifdef ONPC",
      "    #define _GLIBCXX_DEBUG",
      "#endif",
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "//Datatype",
      "#define char unsigned char",
      "typedef long long ll;",
      "typedef long double ld;",
      "typedef string str;",
      "// #define int long long",
      "",
      "//misc",
      '#define endl "\\n"',
      "#define present(a,b)  a.find(b) != a.end()",
      "#define acc(x)   accumulate(all(x),0ll)",
      '#define case(i)  cout<<"Case #"<<i<<": "',
      "#define re  return",
      "#define maxheap(x)  priority_queue<x>",
      "#define minheap(x)  priority_queue<x,vector<x>,greater<x>>",
      "#define trailingzll  __builtin_ctzll",
      "#define leadingzll   __builtin_clzl",
      "#define fastread()   (ios_base:: sync_with_stdio(false), cin.tie(NULL));",
      "",
      "//math and impl",
      '#define yesno(x) cout << ((x) ? "Yes" : "No") << endl',
      "#define sqr(x) ((x) * (x))",
      "#define mod 1000000007",
      "#define INF 1e18",
      "const int MOD = (int)1e9 + 7; // 998244353;",
      "const int MX = (int)2e5 + 5;",
      "const ld PI = acos((ld)-1);",
      "#define gcd(a,b)  __gcd(a,b)",
      "",
      "// mt19937 rnd(239);",
      "mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); ",
      "",
      "int solve() {",
      "    ",
    }),
    i(3, "// solve logic"),
    t({ "", "  " }),
    i(1, ""),
    t({
      "",
      "   return 0;",
      "}",
      "",
      "int32_t main() {",
      "    fastread();",
      "    int TET = 1;",
      "    //",
    }),
    i(2, "cin >> TET;"),
    t({
      "",
      "    for (int i = 1; i <= TET; i++) {",
      '        //cout<< "Case #"<<i <<": ";',
      "        //case(i); ",
      "        if (solve()) {",
      "            break;",
      "        }",
      "        #ifdef ONPC",
      '            cout << "__________________________" << endl;',
      "        #endif",
      "    }",
      "    #ifdef ONPC",
      '        cerr << endl << "finished in " << clock() * 1.0 / CLOCKS_PER_SEC << " sec" << endl;',
      "    #endif",
      "}",
    }),
  }),
}
